import { useEffect, useState, useRef } from "react";
import { supabase } from "@/integrations/supabase/client";
import { MapPin } from "lucide-react";
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import './ComplaintMap.css';

// Configure Leaflet's default icon path
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: '/marker-icon-2x.png',
  iconUrl: '/marker-icon.png',
  shadowUrl: '/marker-shadow.png',
});

// Map settings
const CHANDIGARH_COORDS: [number, number] = [30.7333, 76.7794];
const INITIAL_ZOOM = 13;

// Define interfaces
interface Complaint {
  id: string;
  complaint_id: string;
  title: string;
  status: string;
  location: string;
  latitude: number | null;
  longitude: number | null;
  category: string;
  created_at?: string;
  description?: string;
}

const ComplaintMap = () => {
  // State
  const [complaints, setComplaints] = useState<Complaint[]>([]);
  const [loading, setLoading] = useState(true);
  const [map, setMap] = useState<L.Map | null>(null);
  
  // Refs
  const mapRef = useRef<HTMLDivElement>(null);
  const markersLayerRef = useRef<L.LayerGroup | null>(null);
  const mapInitializedRef = useRef(false);

  // Fetch complaints from Supabase
  const fetchComplaints = async () => {
    try {
      const { data, error } = await supabase
        .from('complaints')
        .select('*')
        .not('latitude', 'is', null)
        .not('longitude', 'is', null);

      if (error) throw error;
      console.log('Fetched complaints:', data?.length || 0);
      setComplaints(data || []);
    } catch (error) {
      console.error('Error fetching complaints:', error);
    } finally {
      setLoading(false);
    }
  };

  // Initialize map
  useEffect(() => {
    if (!mapRef.current || mapInitializedRef.current) return;

    console.log('Initializing map...');
    const mapInstance = L.map(mapRef.current, {
      center: CHANDIGARH_COORDS,
      zoom: INITIAL_ZOOM,
      layers: [
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: 'Â© OpenStreetMap contributors',
          maxZoom: 19
        })
      ]
    });

    // Create a layer group for markers
    const markersLayer = L.layerGroup().addTo(mapInstance);
    markersLayerRef.current = markersLayer;
    
    setMap(mapInstance);
    mapInitializedRef.current = true;

    // Force a resize after initialization
    setTimeout(() => {
      console.log('Invalidating map size...');
      mapInstance.invalidateSize(true);
    }, 250);

    return () => {
      console.log('Cleaning up map...');
      mapInstance.remove();
      setMap(null);
      markersLayerRef.current = null;
      mapInitializedRef.current = false;
    };
  }, []);

  // Update markers when complaints change
  useEffect(() => {
    if (!map || !markersLayerRef.current) return;

    console.log('Updating markers...');
    markersLayerRef.current.clearLayers();

    complaints.forEach((complaint) => {
      if (!complaint.latitude || !complaint.longitude) return;

      const marker = L.marker([complaint.latitude, complaint.longitude])
        .bindPopup(`
          <div class="p-2">
            <h3 class="font-bold">${complaint.title}</h3>
            <p>Status: ${complaint.status}</p>
            <p>Category: ${complaint.category}</p>
            <p>Location: ${complaint.location}</p>
          </div>
        `);

      // Add marker to the layer group
      markersLayerRef.current?.addLayer(marker);

      // Color code markers based on status
      const el = marker.getElement();
      if (el) {
        el.style.filter = complaint.status === 'resolved'
          ? 'hue-rotate(120deg)'  // Green for resolved
          : complaint.status === 'in_progress'
            ? 'hue-rotate(60deg)'   // Yellow for in progress
            : '';                    // Default red for pending
      }
    });

    // Fit bounds if we have markers
    if (complaints.length > 0) {
      const validComplaints = complaints.filter(c => c.latitude && c.longitude);
      if (validComplaints.length > 0) {
        const bounds = L.latLngBounds(
          validComplaints.map(c => [c.latitude!, c.longitude!])
        );
        map.fitBounds(bounds, { padding: [50, 50] });
      }
    }
  }, [map, complaints]);

  // Fetch complaints on mount
  useEffect(() => {
    fetchComplaints();
  }, []);

  // Loading state
  if (loading) {
    return (
      <div className="w-full h-[500px] bg-gray-100 rounded-lg flex items-center justify-center">
        <p>Loading map...</p>
      </div>
    );
  }

  // Render map
  return (
    <div className="w-full h-[calc(100vh-12rem)] rounded-lg overflow-hidden shadow-lg bg-white">
      <div ref={mapRef} className="w-full h-full relative">
        {complaints.length === 0 && (
          <div className="absolute inset-0 bg-white flex items-center justify-center">
            <div className="text-center">
              <MapPin className="mx-auto h-12 w-12 mb-2 opacity-50" />
              <p className="text-gray-500">No complaints with location data</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ComplaintMap;